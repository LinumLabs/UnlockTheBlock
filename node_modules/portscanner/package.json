{
  "_args": [
    [
      {
        "raw": "portscanner@2.1.1",
        "scope": null,
        "escapedName": "portscanner",
        "name": "portscanner",
        "rawSpec": "2.1.1",
        "spec": "2.1.1",
        "type": "version"
      },
      "/home/nicolaas/hackathon/node_modules/browser-sync"
    ]
  ],
  "_from": "portscanner@2.1.1",
  "_id": "portscanner@2.1.1",
  "_inCache": true,
  "_location": "/portscanner",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/portscanner-2.1.1.tgz_1479972921921_0.4666651152074337"
  },
  "_npmUser": {
    "name": "laggingreflex",
    "email": "laggingreflex@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "portscanner@2.1.1",
    "scope": null,
    "escapedName": "portscanner",
    "name": "portscanner",
    "rawSpec": "2.1.1",
    "spec": "2.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/browser-sync"
  ],
  "_resolved": "https://registry.npmjs.org/portscanner/-/portscanner-2.1.1.tgz",
  "_shasum": "eabb409e4de24950f5a2a516d35ae769343fbb96",
  "_shrinkwrap": null,
  "_spec": "portscanner@2.1.1",
  "_where": "/home/nicolaas/hackathon/node_modules/browser-sync",
  "author": "",
  "bugs": {
    "url": "https://github.com/baalexander/node-portscanner/issues"
  },
  "dependencies": {
    "async": "1.5.2",
    "is-number-like": "^1.0.3"
  },
  "description": "Asynchronous port scanner for Node.js",
  "devDependencies": {
    "ava": "^0.4.2",
    "eslint": "^3.10.2",
    "eslint-config-standard": "^6.2.1",
    "standard": "^8.5.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "eabb409e4de24950f5a2a516d35ae769343fbb96",
    "tarball": "https://registry.npmjs.org/portscanner/-/portscanner-2.1.1.tgz"
  },
  "engines": {
    "node": ">=0.4",
    "npm": ">=1.0.0"
  },
  "gitHead": "47889e0c6a4ef449420e90eb59a5100a11eab6db",
  "homepage": "https://github.com/baalexander/node-portscanner",
  "keywords": [
    "portscanner",
    "port",
    "scanner",
    "checker",
    "status"
  ],
  "license": "MIT",
  "main": "./lib/portscanner.js",
  "maintainers": [
    {
      "name": "baalexander",
      "email": "baalexander@gmail.com"
    },
    {
      "name": "laggingreflex",
      "email": "laggingreflex@gmail.com"
    },
    {
      "name": "shinnn",
      "email": "snnskwtnb@gmail.com"
    },
    {
      "name": "smassa",
      "email": "endangeredmassa@gmail.com"
    }
  ],
  "name": "portscanner",
  "optionalDependencies": {},
  "preferGlobal": false,
  "readme": "# portscanner\n\n[![npm](https://img.shields.io/npm/v/portscanner.svg)](https://www.npmjs.com/package/portscanner)\n[![JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\nThe portscanner module is\nan asynchronous JavaScript port scanner for Node.js.\n\nPortscanner can check a port,\nor range of ports,\nfor 'open' or 'closed' statuses.\n\n[Looking for maintainer](https://github.com/baalexander/node-portscanner/issues/25)!\n\n## Install\n\n```bash\nnpm install portscanner\n```\n\n## Usage\n\nA brief example:\n\n```javascript\nvar portscanner = require('portscanner')\n\n// Checks the status of a single port\nportscanner.checkPortStatus(3000, '127.0.0.1', function(error, status) {\n  // Status is 'open' if currently in use or 'closed' if available\n  console.log(status)\n})\n\n// Find the first available port. Asynchronously checks, so first port\n// determined as available is returned.\nportscanner.findAPortNotInUse(3000, 3010, '127.0.0.1', function(error, port) {\n  console.log('AVAILABLE PORT AT: ' + port)\n})\n\n// Find the first port in use or blocked. Asynchronously checks, so first port\n// to respond is returned.\nportscanner.findAPortInUse(3000, 3010, '127.0.0.1', function(error, port) {\n  console.log('PORT IN USE AT: ' + port)\n})\n\n// You can also pass array of ports to check\nportscanner.findAPortInUse([3000, 3005, 3006], '127.0.0.1', function(error, port) {\n  console.log('PORT IN USE AT: ' + port)\n})\n\n// And skip host param. Default is '127.0.0.1'\nportscanner.findAPortNotInUse(3000, 4000, function(error, port) {\n  console.log('PORT IN USE AT: ' + port)\n})\n\n// And use promises\nportscanner.findAPortNotInUse(3000, 4000).then(function(port) {\n  console.log('PORT IN USE AT: ' + port)\n})\n```\n\nThe example directory contains a more detailed example.\n\n## Test\n\n```sh\nnpm test\n```\n\n## Future\n\nPlease create issues or pull requests\nfor port scanning related features\nyou'd like to see included.\n\n## License (MIT)\n\n[MIT](LICENSE)\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/baalexander/node-portscanner.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "ava"
  },
  "version": "2.1.1"
}
