{
  "_args": [
    [
      {
        "raw": "lite-server@^2.3.0",
        "scope": null,
        "escapedName": "lite-server",
        "name": "lite-server",
        "rawSpec": "^2.3.0",
        "spec": ">=2.3.0 <3.0.0",
        "type": "range"
      },
      "/home/nicolaas/hackathon"
    ]
  ],
  "_from": "lite-server@>=2.3.0 <3.0.0",
  "_id": "lite-server@2.3.0",
  "_inCache": true,
  "_location": "/lite-server",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/lite-server-2.3.0.tgz_1489003660406_0.07161730993539095"
  },
  "_npmUser": {
    "name": "johnpapa",
    "email": "john@johnpapa.net"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lite-server@^2.3.0",
    "scope": null,
    "escapedName": "lite-server",
    "name": "lite-server",
    "rawSpec": "^2.3.0",
    "spec": ">=2.3.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/lite-server/-/lite-server-2.3.0.tgz",
  "_shasum": "5b4cc8f5d5fd4836105480ab2ac48a3a0de2b0c8",
  "_shrinkwrap": null,
  "_spec": "lite-server@^2.3.0",
  "_where": "/home/nicolaas/hackathon",
  "bin": {
    "lite-server": "./bin/lite-server"
  },
  "bugs": {
    "url": "https://github.com/johnpapa/lite-server/issues"
  },
  "contributors": [
    {
      "name": "John Papa",
      "email": "john@johnpapa.net"
    },
    {
      "name": "Christopher Martin",
      "email": "cgmartin@gmail.com"
    }
  ],
  "dependencies": {
    "browser-sync": "^2.18.5",
    "connect-history-api-fallback": "^1.2.0",
    "connect-logger": "0.0.1",
    "lodash": "^4.11.1",
    "minimist": "1.2.0"
  },
  "description": "Lightweight development node server for serving a web app, providing a fallback for browser history API, loading in the browser, and injecting scripts on the fly.",
  "devDependencies": {
    "eslint": "^2.8.0",
    "istanbul": "^0.4.3",
    "mocha": "^3.2.0",
    "mockery": "^1.6.2",
    "sinon": "^1.17.3"
  },
  "directories": {},
  "dist": {
    "shasum": "5b4cc8f5d5fd4836105480ab2ac48a3a0de2b0c8",
    "tarball": "https://registry.npmjs.org/lite-server/-/lite-server-2.3.0.tgz"
  },
  "gitHead": "9d0a040858e6a1f8f28a899750e1b8f9754d0814",
  "homepage": "https://github.com/johnpapa/lite-server#readme",
  "keywords": [
    "angular",
    "spa",
    "static",
    "server",
    "development"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "johnpapa",
      "email": "john@johnpapa.net"
    }
  ],
  "name": "lite-server",
  "optionalDependencies": {},
  "readme": "# lite-server\n\nLightweight *development only* node server that serves a web app, opens it in the browser, refreshes when html or javascript change, injects CSS changes using sockets, and has a fallback page when a route is not found.\n\n[![Dependency Status](https://david-dm.org/johnpapa/lite-server.svg)](https://david-dm.org/johnpapa/lite-server)\n[![npm version](https://badge.fury.io/js/lite-server.svg)](http://badge.fury.io/js/lite-server)\n[![Build Status](https://travis-ci.org/johnpapa/lite-server.svg?branch=master)](https://travis-ci.org/johnpapa/lite-server)\n\n## Why\n\nBrowserSync does most of what we want in a super fast lightweight development server. It serves the static content, detects changes, refreshes the browser, and offers many customizations.\n\nWhen creating a SPA there are routes that are only known to the browser. For example, `/customer/21` may be a client side route for an Angular app. If this route is entered manually or linked to directly as the entry point of the Angular app (aka a deep link) the static server will receive the request, because Angular is not loaded yet. The server will not find a match for the route and thus return a 404. The desired behavior in this case is to return the `index.html` (or whatever starting page of the app we have defined). BrowserSync does not automatically allow for a fallback page. But it does allow for custom middleware. This is where `lite-server` steps in.\n\n`lite-server` is a simple customized wrapper around BrowserSync to make it easy to serve SPAs.\n\n## Installation and Usage\n\nThe recommended installation method is a local NPM install for your project:\n\n```bash\n$ npm install lite-server --save-dev\n$ yarn add lite-server --dev # or yarn\n```\n\n...and add a \"script\" entry within your project's `package.json` file:\n\n```json\n# Inside package.json...\n  \"scripts\": {    \n    \"dev\": \"lite-server\"\n  },\n```\n\nWith the above script entry, you can then start `lite-server` via:\n\n```bash\n$ npm run dev\n```\n\nOther options for running locally installed NPM binaries is discussed in this Stack Overflow question: [How to use package installed locally in node_modules](http://stackoverflow.com/q/9679932)\n\n### Global Installation\n\nlite-server can be also installed globally, if preferred:\n\n```bash\n$ npm install -g lite-server\n\n# To run:\n$ lite-server\n```\n\n## Custom Configuration\n\nThe default behavior serves from the current folder, opens a browser, and applies a HTML5 route fallback to `./index.html`.\n\nlite-server uses [BrowserSync](https://www.browsersync.io/), and allows for configuration overrides via a local `bs-config.json` or `bs-config.js` file in your project.\n\nYou can provide custom path to your config file via `-c` or `--config=` run time options:\n\n```bash\nlite-server -c configs/my-bs-config.js\n```\n\nFor example, to change the server port, watched file paths, and base directory for your project, create a `bs-config.json` in your project's folder:\n\n```json\n{\n  \"port\": 8000,\n  \"files\": [\"./src/**/*.{html,htm,css,js}\"],\n  \"server\": { \"baseDir\": \"./src\" }\n}\n```\n\nYou can also provide custom path to your base directory `--baseDir=` run time options:\n\n```bash\nlite-server --baseDir=\"dist\"\n```\n\nA more complicated example with modifications to the server middleware can be done with a `bs-config.js` file, which requires the `module.exports = { ... };` syntax:\n\n```js\nmodule.exports = {\n  server: {\n    middleware: {\n      // overrides the second middleware default with new settings\n      1: require('connect-history-api-fallback')({index: '/index.html', verbose: true})\n    }\n  }\n};\n```\n\nThe `bs-config.js` file may also export a function that receives the lite-server Browsersync instance as its only argument. While not required, the return value of this function will be used to extend the default lite-server configuration.\n\n```js\nmodule.exports = function(bs) {\n\n  return {\n    server: {\n      middleware: {\n        // overrides the second middleware default with new settings\n        1: require('connect-history-api-fallback')({\n          index: '/index.html',\n          verbose: true\n        })\n      }\n    }\n  };\n\n};\n```\n\n**NOTE:** Keep in mind that when using middleware overrides the specific middleware module must be installed in your project. For the above example, you'll need to do:\n\n```bash\n$ npm install connect-history-api-fallback --save-dev\n```\n\n...otherwise you'll get an error similar to:\n\n```\nError: Cannot find module 'connect-history-api-fallback'\n```\n\nAnother example: To remove one of the [default middlewares](./lib/config-defaults.js), such as `connect-logger`, you can set it's array index to `null`:\n\n```js\nmodule.exports = {\n  server: {\n    middleware: {\n      0: null     // removes default `connect-logger` middleware\n    }\n  }\n};\n```\n\nA list of the entire set of BrowserSync options can be found in its docs: <http://www.browsersync.io/docs/options/>\n\n## Testing\n\nWhen using `lite-server` to run end to end tests, we may not want to log verbosely. We may also want to prevent the browser from opening. These options in the `bs-config.js` will silence all logging from `lite-server`:\n\n```js\n  open: false\n  logLevel: \"silent\",\n  server: {\n    middleware: {\n      0: null\n    }\n  }\n```\n\n## Known Issues\n\nCSS with Angular 2 is embedded thus even though BrowserSync detects the file change to CSS, it does not inject the file via sockets. As a workaround, `injectChanges` defaults to `false`.\n\n## Contributing\n\n1.  Fork and clone it\n1.  Install dependencies: `npm install`\n1.  Create a feature branch: `git checkout -b new-feature`\n1.  Commit changes: `git commit -am 'Added a feature'`\n1.  Run static code analysis and unit tests: `npm test`\n1.  Push to the remote branch: `git push origin new-feature`\n1.  Create a new [Pull Request](https://github.com/johnpapa/lite-server/pull/new/master)\n\n## License\n\nCode released under the [MIT license](./LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/johnpapa/lite-server.git"
  },
  "scripts": {
    "test": "eslint *.js lib/*.js && istanbul cover _mocha -- -R spec"
  },
  "version": "2.3.0"
}
