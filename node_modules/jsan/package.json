{
  "_args": [
    [
      {
        "raw": "jsan@^3.1.5",
        "scope": null,
        "escapedName": "jsan",
        "name": "jsan",
        "rawSpec": "^3.1.5",
        "spec": ">=3.1.5 <4.0.0",
        "type": "range"
      },
      "/home/nicolaas/hackathon/node_modules/remote-redux-devtools"
    ]
  ],
  "_from": "jsan@>=3.1.5 <4.0.0",
  "_id": "jsan@3.1.9",
  "_inCache": true,
  "_location": "/jsan",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/jsan-3.1.9.tgz_1493890830723_0.7397061609663069"
  },
  "_npmUser": {
    "name": "zalmoxisus",
    "email": "zalmoxisus@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jsan@^3.1.5",
    "scope": null,
    "escapedName": "jsan",
    "name": "jsan",
    "rawSpec": "^3.1.5",
    "spec": ">=3.1.5 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/remote-redux-devtools",
    "/remotedev-serialize",
    "/remotedev-utils"
  ],
  "_resolved": "https://registry.npmjs.org/jsan/-/jsan-3.1.9.tgz",
  "_shasum": "2705676c1058f0a7d9ac266ad036a5769cfa7c96",
  "_shrinkwrap": null,
  "_spec": "jsan@^3.1.5",
  "_where": "/home/nicolaas/hackathon/node_modules/remote-redux-devtools",
  "author": {
    "name": "Moshe Kolodny"
  },
  "bugs": {
    "url": "https://github.com/kolodny/jsan/issues"
  },
  "dependencies": {},
  "description": "handle circular references when stringifying and parsing",
  "devDependencies": {
    "benchmark": "^2.1.2",
    "circular-json": "^0.3.0",
    "immutable": "^3.7.6",
    "json-stringify-safe": "^5.0.1",
    "mobx": "^2.4.1",
    "mocha": "^2.2.1",
    "rimraf": "^2.5.2"
  },
  "directories": {},
  "dist": {
    "shasum": "2705676c1058f0a7d9ac266ad036a5769cfa7c96",
    "tarball": "https://registry.npmjs.org/jsan/-/jsan-3.1.9.tgz"
  },
  "gitHead": "a37187adb10762316ba1d271eb02d7334e8d2bf5",
  "homepage": "https://github.com/kolodny/jsan",
  "keywords": [
    "json"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "kolodny",
      "email": "kolodny.github@gmail.com"
    },
    {
      "name": "zalmoxisus",
      "email": "zalmoxisus@gmail.com"
    }
  ],
  "name": "jsan",
  "optionalDependencies": {},
  "readme": "jsan\n===\n\n[![Build Status](https://travis-ci.org/kolodny/jsan.svg?branch=master)](https://travis-ci.org/kolodny/jsan)\n\n### JavaScript \"All The Things\" Notation  \n![jsan](https://i.imgur.com/IdKDIB6.png)\n\nEasily stringify and parse any object including objects with circular references, self references, dates, regexes, `undefined`, errors, and even functions\n<sub>[1](#functions)</sub>, using the familar `parse` and `stringify` methods.\n\nThere are two ways to use this library, the first is to be able to\nserialize without having to worry about circular references,\nthe second way is be able to handle dates, regexes, errors, functions\n<sub>[1](#functions)</sub>, errors, and undefined (normally\n`JSON.stringify({ u: undefined }) === '{}'`)\n\nThe usage reflect these two approaches. If you just want to be\nable to serialize an object then use `jsan.stringify(obj)`,\nif you want to JSON all the things then use it like\n`jsan.stringify(obj, null, null, true)`, the first three\narguments are the same as `JSON.stringify` (yup, `JSON.stringify`\ntakes three arguments)\n\nNote that `jsan.stringify(obj, null, null, true)` will also deal\nwith circular references\n\n\n### Usage\n\n```js\nvar jsan = require('jsan');\n\nvar obj = {};\nobj['self'] = obj;\nobj['sub'] = {};\nobj['sub']['subSelf'] = obj['sub'];\nobj.now = new Date(2015, 0, 1);\n\nvar str = jsan.stringify(obj);\nstr === '{\"self\":{\"$jsan\":\"$\"},\"sub\":{\"subSelf\":{\"$jsan\":\"$.sub\"}},\"now\":\"2015-01-01T05:00:00.000Z\"}'; // true\nvar str2 = jsan.stringify(obj, null, null, true);\nstr2 === '{\"self\":{\"$jsan\":\"$\"},\"sub\":{\"subSelf\":{\"$jsan\":\"$.sub\"}},\"now\":{\"$jsan\":\"d1420088400000\"}}'; // true\n\nvar newObj1 = jsan.parse(str);\nnewObj1 === newObj1['self']; // true\nnewObj1['sub']['subSelf'] === newObj1['sub']; // true\ntypeof newObj1.now === 'string'; // true\n\nvar newObj2 = jsan.parse(str2);\nnewObj2 === newObj2['self']; // true\nnewObj2['sub']['subSelf'] === newObj2['sub']; // true\nnewObj2.now instanceof Date; // true\n```\n\n#### Notes\n\nThis ulitilty has been heavily optimized and performs as well as the native `JSON.parse` and\n`JSON.stringify`, for usages of `jsan.stringify(obj)` when there are no circular references. \nIt does this by first `try { JSON.stringify(obj) }` and only when that fails, will it walk\nthe object. Because of this it won't property handle self references that aren't circular by\ndefault. You can work around this by passing false as the fourth argument, or pass true and it\nwill also handle dates, regexes, `undefeined`, errors, and functions\n\n```js\nvar obj = { r: /test/ };\nvar subObj = {};\nobj.a = subObj;\nobj.b = subObj;\nvar str1 = jsan.stringify(obj) // '{\"r\":{},a\":{},\"b\":{}}'\nvar str2 = jsan.stringify(obj, null, null, false) // '{\"r\":{},\"a\":{},\"b\":{\"$jsan\":\"$.a\"}}'\nvar str3 = jsan.stringify(obj, null, null, true) // '{\"r\":{\"$jsan\":\"r,test\"},\"a\":{},\"b\":{\"$jsan\":\"$.a\"}}'\n```\n\n##### Functions\n\nYou can't execute the functions after `stringify()` and `parse()`, they are just functions\nthat throw which have a `toString()` method similar to the original function\n\n### Advance Usage\n\nYou can specify how and what should be handled by passing an object as the fourth argument:\n\n```js\nvar obj = { u: undefined, r: /test/, f: function bar() {} };\nvar str = jsan.stringify(obj, null, null, { undefined: true, function: true }); // '{\"u\":{\"$jsan\":\"u\"},\"r\":{},\"f\":{\"$jsan\":\"ffunction bar() { /* ... */ }\"}}'\n```\n\nThe `function` property of options can also take a function which will be used as the\nfunction stringifyer:\n\n```js\nvar obj = { u: undefined, r: /test/, f: function(x) { return x + 1 } };\nvar str = jsan.stringify(obj, null, null, {\n  undefined: true,\n  function: function(fn) { return fn.toString() }\n});\nstr === '{\"u\":{\"$jsan\":\"u\"},\"r\":{},\"f\":{\"$jsan\":\"ffunction (x) { return x + 1 }\"}}'; // true\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kolodny/jsan.git"
  },
  "scripts": {
    "benchmark": "node perf/bench > perf/results.txt",
    "test": "mocha"
  },
  "version": "3.1.9"
}
