{
  "_args": [
    [
      {
        "raw": "socketcluster@^6.7.1",
        "scope": null,
        "escapedName": "socketcluster",
        "name": "socketcluster",
        "rawSpec": "^6.7.1",
        "spec": ">=6.7.1 <7.0.0",
        "type": "range"
      },
      "/home/nicolaas/hackathon/node_modules/remotedev-server"
    ]
  ],
  "_from": "socketcluster@>=6.7.1 <7.0.0",
  "_id": "socketcluster@6.8.0",
  "_inCache": true,
  "_location": "/socketcluster",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/socketcluster-6.8.0.tgz_1502229594825_0.6008149664849043"
  },
  "_npmUser": {
    "name": "topcloudsystems",
    "email": "grosjona@yahoo.com.au"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {
    "lodash": "4.17.4"
  },
  "_requested": {
    "raw": "socketcluster@^6.7.1",
    "scope": null,
    "escapedName": "socketcluster",
    "name": "socketcluster",
    "rawSpec": "^6.7.1",
    "spec": ">=6.7.1 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/remotedev-server"
  ],
  "_resolved": "https://registry.npmjs.org/socketcluster/-/socketcluster-6.8.0.tgz",
  "_shasum": "41cf838b0ba982eefdd8e8051967b76e39d7ee73",
  "_shrinkwrap": null,
  "_spec": "socketcluster@^6.7.1",
  "_where": "/home/nicolaas/hackathon/node_modules/remotedev-server",
  "bin": {
    "socketcluster": "bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/SocketCluster/socketcluster/issues"
  },
  "contributors": [
    {
      "name": "Jonathan Gros-Dubois",
      "email": "grosjona@yahoo.com.au"
    }
  ],
  "dependencies": {
    "async": "2.0.0",
    "base64id": "0.1.0",
    "fs-extra": "2.0.0",
    "inquirer": "1.1.3",
    "minimist": "1.1.0",
    "sc-auth": "~4.1.1",
    "sc-broker-cluster": "~4.3.0",
    "sc-errors": "~1.3.3",
    "socketcluster-server": "~6.3.0",
    "uid-number": "0.0.5",
    "uuid": "3.1.0"
  },
  "description": "SocketCluster - A Highly parallelized WebSocket server cluster to make the most of multi-core machines/instances.",
  "devDependencies": {
    "socketcluster-client": "~6.4.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-RcR0g0YxozkKzDZqtqGxVBjB6Vqkze4VRTXFimNh2CPh8iemquJtZsrRj2oaMyJYUlLQZbO5TrlIsHIK0kSwQQ==",
    "shasum": "41cf838b0ba982eefdd8e8051967b76e39d7ee73",
    "tarball": "https://registry.npmjs.org/socketcluster/-/socketcluster-6.8.0.tgz"
  },
  "gitHead": "d709eb331cade635f23ea87508ebaf5b13bc7a08",
  "homepage": "http://socketcluster.io",
  "keywords": [
    "websocket",
    "server",
    "realtime",
    "cluster",
    "scalable"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "topcloudsystems",
      "email": "grosjona@yahoo.com.au"
    }
  ],
  "name": "socketcluster",
  "optionalDependencies": {},
  "readme": "SocketCluster\n======\n\n[![Join the chat at https://gitter.im/SocketCluster/socketcluster](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/SocketCluster/socketcluster?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![SocketCluster logo](https://raw.github.com/SocketCluster/socketcluster/master/assets/logo.png)](http://socketcluster.io/)\n\nComplete documentation available at: http://socketcluster.io/\n\nDocumentation for SCC is available at https://github.com/SocketCluster/socketcluster/blob/master/scc-guide.md\n\n## Introduction\n\nSocketCluster is a fast, highly scalable HTTP + realtime server engine which lets you build multi-process\nrealtime servers that make use of all CPU cores on a machine/instance.\nIt removes the limitations of having to run your Node.js server as a single thread and makes your backend\nresilient by automatically recovering from worker crashes and aggregating errors into a central log on each host.\nSC can also auto-scale across multiple hosts on top of Kubernetes; see SCC guide: https://github.com/SocketCluster/socketcluster/blob/master/scc-guide.md.\n\nFollow the project on Twitter: https://twitter.com/SocketCluster\nSubscribe for updates: http://socketcluster.launchrock.com/\n\n\n## Installation\n\nThere are two ways to install SocketCluster.\n\n\n### The easy way (Sets up boilerplate - Ready to run):\n\nSetup the socketcluster command:\n\n```bash\nnpm install -g socketcluster\n```\n\nOR\n\n```bash\nsudo npm install -g socketcluster\n```\n\nThen\n\n```bash\nsocketcluster create myapp\n```\n\nOnce it's installed, go to your new myapp/ directory and launch with:\n\n```bash\nnode server\n```\n\nAccess at URL http://localhost:8000/\n\n### The hard way (More modular - Separate server and client):\n\n```bash\nnpm install socketcluster\n```\n\nYou will also need to install the client separately which you can get using the following command:\n\n```bash\nnpm install socketcluster-client\n```\n\nThe socketcluster-client script is called socketcluster.js (located in the main socketcluster-client directory)\n- You should include it in your HTML page using a &lt;script&gt; tag in order to interact with SocketCluster.\nFor more details on how to use socketcluster-client, go to https://github.com/SocketCluster/socketcluster-client\n\nIt is recommended that you use Node.js version >=0.10.22 due to memory leaks present in older versions.\n\n### Using over HTTPS\n\nIn order to run SocketCluster over HTTPS, all you need to do is set the protocol to 'https' and\nprovide your private key and certificate as a start option when you instantiate SocketCluster - Example:\n\n```js\nvar socketCluster = new SocketCluster({\n  workers: 3,\n  brokers: 3,\n  port: 8000,\n  appName: 'myapp',\n  workerController: 'worker.js',\n  protocol: 'https',\n  protocolOptions: {\n    key: fs.readFileSync(__dirname + '/keys/enc_key.pem', 'utf8'),\n    cert: fs.readFileSync(__dirname + '/keys/cert.pem', 'utf8'),\n    passphrase: 'passphase4privkey'\n  }\n});\n```\n\nThe protocolOptions option is exactly the same as the one you pass to a standard Node HTTPS server:\nhttp://nodejs.org/api/https.html#https_https_createserver_options_requestlistener\n\n\n## Docker and SocketCluster\n\nYou can create an app on top of SocketCluster's docker image. The SC container can be run standalone or\nas a base image for your own container.\n\nThe official SocketCluster container on DockerHub is here: https://hub.docker.com/r/socketcluster/socketcluster/\n\nThe Dockerfile for the base image is here: https://github.com/SocketCluster/socketcluster/blob/master/sample/Dockerfile\n\nTo use the SocketCluster container as your base image, your app's Dockerfile might look like this:\n\n```\nFROM socketcluster/socketcluster\nMAINTAINER John Smith\n\nLABEL version=\"1.0.0\"\nLABEL description=\"Custom app based on SocketCluster\"\n\nWORKDIR /usr/src/\nCOPY . /usr/src/\n\nRUN npm install\n\nEXPOSE 8000\n\nCMD [\"npm\", \"start\"]\n\n```\n\nThen you can just build your container using:\n\n```docker build -t my-socketcluster-app:v1.0.0 .```\n\nNote that there are more ways to run SocketCluster with Docker.\nYou can also mount your own volumes and point to custom worker.js and broker.js files which are\ninside those volumes using environment variables. You can see the environment variables which are used\nby SocketCluster here: https://github.com/SocketCluster/socketcluster/blob/master/sample/server.js\n\nDocker volumes allow you to sneak your own directories (containing your own worker.js and broker.js source files) into the SocketCluster container without having to rebuild the image (good for development).\nRead this section on volumes to get an idea of how they work with Docker: https://docs.docker.com/engine/userguide/containers/dockervolumes/\n\nNote that if you want to attach any volumes to your SocketCluster container, you should mount them to the ```/usr/src/``` path (inside the container) - That's the root directory from which SC loads user-defined source code.\n\nFor example, if you wanted to quickly run SocketCluster with your own workerController file (```worker.js```), you could just put your ```worker.js``` file inside a ```/home/my-username/controllers/``` directory (on your host system) and then bundle it into the container as a volume by running a command like this (example):\n\n```\ndocker run -d -v /home/my-username/controllers/:/usr/src/controllers/ -e \"SOCKETCLUSTER_WORKER_CONTROLLER=/usr/src/controllers/worker.js\" socketcluster/socketcluster\n```\n\nTo summarize:\n\n- The ```-d``` flag just tells Docker to run the container in the background.\n- The ```-v``` flag tells docker to mount the ```/home/my-username/controllers/``` directory (which is on your host machine) and map it to the ```/usr/src/controllers/``` (inside the SocketCluster container).\n- The ```-e``` flag allows you to define custom environment variables. Here we are just using the SOCKETCLUSTER_WORKER_CONTROLLER env var to tell SocketCluster\nto use the worker.js file which is inside the volume which we just mounted to the container at path ```/usr/src/controllers/```.\n- The final argument ```socketcluster/socketcluster``` is the Docker image.\n\n\n## Contribute to SocketCluster\n\n- More integration test cases needed\n- Unit tests\n- Efficiency/speed - faster is better!\n- Suggestions?\n\nTo contribute; clone this repo, then cd inside it and then run npm install to install all dependencies.\n\n### Donations\n\nIf you would like to contribute to the SocketCluster project financially, you can make a Bitcoin donation to the following wallet address: `1FwhDzAAWQHtfhZkNaB7oSwmbSoreHPC6o`\n\n\n## Change log\n\nSee GitHub releases for changes.\n\n### Custom Codecs\n\nAn increasing number of users have expressed interest in using SC to build massively multiplayer online games. One concern which was raised is that the standard SocketCluster protocol message format has too much overhead for certain kinds of games. See https://github.com/SocketCluster/socketcluster-client/issues/64.\nBased on the standard format, various actions can have between 40 and 70 bytes of overhead - This isn't much if each user is only sending one medium-sized message every few seconds but what if you wanted 10 to 20 tiny messages every second? The overhead bandwidth cost would add up and could negatively affect the profitability of the game.\nFor this reason, we have introduced the concept of 'Custom Codecs' - Since v5.0.15, you can provide a custom Codec engine (a JavaScript/Node.js module) on both the client and server to allow you to compress messages into any format you like (optimized for your use case). If you write a Codec module which you feel might be useful for other developers, feel free to let us know <a href=\"https://gitter.im/SocketCluster/socketcluster\">here</a> and share with the rest of the SC community.\n\nSearch for 'setCodecEngine' in http://socketcluster.io/#!/docs/api-scserver and 'codecEngine' in http://socketcluster.io/#!/docs/api-socketcluster-client for more details.\n\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/SocketCluster/socketcluster.git"
  },
  "version": "6.8.0"
}
