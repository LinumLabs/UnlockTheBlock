{
  "_args": [
    [
      {
        "raw": "immutable@3.8.2",
        "scope": null,
        "escapedName": "immutable",
        "name": "immutable",
        "rawSpec": "3.8.2",
        "spec": "3.8.2",
        "type": "version"
      },
      "/home/nicolaas/hackathon/node_modules/browser-sync"
    ]
  ],
  "_from": "immutable@3.8.2",
  "_id": "immutable@3.8.2",
  "_inCache": true,
  "_location": "/immutable",
  "_nodeVersion": "4.1.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/immutable-3.8.2.tgz_1507055333067_0.6651981584727764"
  },
  "_npmUser": {
    "name": "leebyron",
    "email": "lee@leebyron.com"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "immutable@3.8.2",
    "scope": null,
    "escapedName": "immutable",
    "name": "immutable",
    "rawSpec": "3.8.2",
    "spec": "3.8.2",
    "type": "version"
  },
  "_requiredBy": [
    "/browser-sync",
    "/browser-sync-ui"
  ],
  "_resolved": "https://registry.npmjs.org/immutable/-/immutable-3.8.2.tgz",
  "_shasum": "c2439951455bb39913daf281376f1530e104adf3",
  "_shrinkwrap": null,
  "_spec": "immutable@3.8.2",
  "_where": "/home/nicolaas/hackathon/node_modules/browser-sync",
  "author": {
    "name": "Lee Byron",
    "url": "https://github.com/leebyron"
  },
  "bugs": {
    "url": "https://github.com/facebook/immutable-js/issues"
  },
  "dependencies": {},
  "description": "Immutable Data Collections",
  "devDependencies": {
    "acorn": "0.11.x",
    "babel-eslint": "^4.1.8",
    "benchmark": "^1.0.0",
    "bluebird": "3.1.1",
    "browser-sync": "2.11.0",
    "browserify": "^5.11.2",
    "colors": "1.1.2",
    "del": "2.2.0",
    "es6-transpiler": "0.7.18",
    "eslint": "^1.10.3",
    "estraverse": "1.9.3",
    "express": "^4.13.4",
    "fbjs-scripts": "^0.5.0",
    "grunt": "0.4.5",
    "grunt-cli": "0.1.13",
    "grunt-contrib-clean": "0.7.0",
    "grunt-contrib-copy": "0.8.2",
    "grunt-contrib-jshint": "0.11.3",
    "grunt-release": "0.13.0",
    "gulp": "3.9.0",
    "gulp-concat": "2.6.0",
    "gulp-filter": "3.0.1",
    "gulp-header": "1.7.1",
    "gulp-jest": "^0.2.1",
    "gulp-jshint": "^1.8.4",
    "gulp-less": "3.0.5",
    "gulp-size": "2.0.0",
    "gulp-sourcemaps": "1.6.0",
    "gulp-uglify": "1.5.1",
    "gulp-util": "3.0.7",
    "harmonize": "1.4.4",
    "jasmine-check": "^0.1.2",
    "jest-cli": "^0.5.10",
    "jshint-stylish": "^0.4.0",
    "magic-string": "0.10.2",
    "marked": "0.3.5",
    "microtime": "^2.0.0",
    "node-jsx": "^0.12.4",
    "react": "^0.12.0",
    "react-router": "^0.11.2",
    "react-tools": "^0.12.0",
    "rollup": "0.24.0",
    "run-sequence": "1.1.5",
    "through2": "2.0.0",
    "typescript": "1.7.5",
    "uglify-js": "2.6.1",
    "vinyl-buffer": "1.0.0",
    "vinyl-source-stream": "1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "c2439951455bb39913daf281376f1530e104adf3",
    "tarball": "https://registry.npmjs.org/immutable/-/immutable-3.8.2.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "dist",
    "contrib",
    "README.md",
    "LICENSE"
  ],
  "gitHead": "9e886489b3af4a9f327a5f71a1819dfb8517c025",
  "homepage": "https://facebook.github.com/immutable-js",
  "jest": {
    "scriptPreprocessor": "resources/jestPreprocessor.js",
    "testFileExtensions": [
      "js",
      "ts"
    ],
    "persistModuleRegistryBetweenSpecs": true
  },
  "keywords": [
    "immutable",
    "persistent",
    "lazy",
    "data",
    "datastructure",
    "functional",
    "collection",
    "stateless",
    "sequence",
    "iteration"
  ],
  "license": "MIT",
  "main": "dist/immutable.js",
  "maintainers": [
    {
      "name": "leebyron",
      "email": "lee@leebyron.com"
    }
  ],
  "name": "immutable",
  "optionalDependencies": {},
  "readme": "Immutable collections for JavaScript\n====================================\n\n[![Build Status](https://travis-ci.org/facebook/immutable-js.svg)](https://travis-ci.org/facebook/immutable-js)\n\n[Immutable][] data cannot be changed once created, leading to much simpler\napplication development, no defensive copying, and enabling advanced memoization\nand change detection techniques with simple logic. [Persistent][] data presents\na mutative API which does not update the data in-place, but instead always\nyields new updated data.\n\nImmutable.js provides many Persistent Immutable data structures including:\n`List`, `Stack`, `Map`, `OrderedMap`, `Set`, `OrderedSet` and `Record`.\n\nThese data structures are highly efficient on modern JavaScript VMs by using\nstructural sharing via [hash maps tries][] and [vector tries][] as popularized\nby Clojure and Scala, minimizing the need to copy or cache data.\n\n`Immutable` also provides a lazy `Seq`, allowing efficient\nchaining of collection methods like `map` and `filter` without creating\nintermediate representations. Create some `Seq` with `Range` and `Repeat`.\n\nWant to hear more? Watch the presentation about Immutable.js:\n\n<a href=\"https://youtu.be/I7IdS-PbEgI\" target=\"_blank\" alt=\"Immutable Data and React\"><img src=\"https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg\" /></a>\n\n[Persistent]: http://en.wikipedia.org/wiki/Persistent_data_structure\n[Immutable]: http://en.wikipedia.org/wiki/Immutable_object\n[hash maps tries]: http://en.wikipedia.org/wiki/Hash_array_mapped_trie\n[vector tries]: http://hypirion.com/musings/understanding-persistent-vector-pt-1\n\n\nGetting started\n---------------\n\nInstall `immutable` using npm.\n\n```shell\nnpm install immutable\n```\n\nThen require it into any module.\n\n```javascript\nvar Immutable = require('immutable');\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n### Browser\n\nTo use `immutable` from a browser, download [dist/immutable.min.js](https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js)\nor use a CDN such as [CDNJS](https://cdnjs.com/libraries/immutable)\nor [jsDelivr](http://www.jsdelivr.com/#!immutable.js).\n\nThen, add it as a script tag to your page:\n\n```html\n<script src=\"immutable.min.js\"></script>\n<script>\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n</script>\n```\n\nOr use an AMD loader (such as [RequireJS](http://requirejs.org/)):\n\n```javascript\nrequire(['./immutable.min.js'], function (Immutable) {\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n});\n```\n\nIf you're using [browserify](http://browserify.org/), the `immutable` npm module\nalso works from the browser.\n\n### TypeScript\n\nUse these Immutable collections and sequences as you would use native\ncollections in your [TypeScript](http://typescriptlang.org) programs while still taking\nadvantage of type generics, error detection, and auto-complete in your IDE.\n\nJust add a reference with a relative path to the type declarations at the top\nof your file.\n\n```javascript\n///<reference path='./node_modules/immutable/dist/immutable.d.ts'/>\nimport Immutable = require('immutable');\nvar map1: Immutable.Map<string, number>;\nmap1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n\nThe case for Immutability\n-------------------------\n\nMuch of what makes application development difficult is tracking mutation and\nmaintaining state. Developing with immutable data encourages you to think\ndifferently about how data flows through your application.\n\nSubscribing to data events throughout your application creates a huge overhead of\nbook-keeping which can hurt performance, sometimes dramatically, and creates\nopportunities for areas of your application to get out of sync with each other\ndue to easy to make programmer error. Since immutable data never changes,\nsubscribing to changes throughout the model is a dead-end and new data can only\never be passed from above.\n\nThis model of data flow aligns well with the architecture of [React][]\nand especially well with an application designed using the ideas of [Flux][].\n\nWhen data is passed from above rather than being subscribed to, and you're only\ninterested in doing work when something has changed, you can use equality.\n\nImmutable collections should be treated as *values* rather than *objects*. While\nobjects represents some thing which could change over time, a value represents\nthe state of that thing at a particular instance of time. This principle is most\nimportant to understanding the appropriate use of immutable data. In order to\ntreat Immutable.js collections as values, it's important to use the\n`Immutable.is()` function or `.equals()` method to determine value equality\ninstead of the `===` operator which determines object reference identity.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 2);\nassert(map1.equals(map2) === true);\nvar map3 = map1.set('b', 50);\nassert(map1.equals(map3) === false);\n```\n\nNote: As a performance optimization `Immutable` attempts to return the existing\ncollection when an operation would result in an identical collection, allowing\nfor using `===` reference equality to determine if something definitely has not\nchanged. This can be extremely useful when used within memoization function\nwhich would prefer to re-run the function if a deeper equality check could\npotentially be more costly. The `===` equality check is also used internally by\n`Immutable.is` and `.equals()` as a performance optimization.\n\nIf an object is immutable, it can be \"copied\" simply by making another reference\nto it instead of copying the entire object. Because a reference is much smaller\nthan the object itself, this results in memory savings and a potential boost in\nexecution speed for programs which rely on copies (such as an undo-stack).\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar clone = map1;\n```\n\n[React]: http://facebook.github.io/react/\n[Flux]: http://facebook.github.io/flux/docs/overview.html\n\n\nJavaScript-first API\n--------------------\n\nWhile `immutable` is inspired by Clojure, Scala, Haskell and other functional\nprogramming environments, it's designed to bring these powerful concepts to\nJavaScript, and therefore has an Object-Oriented API that closely mirrors that\nof [ES6][] [Array][], [Map][], and [Set][].\n\n[ES6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\n[Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n[Map]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n[Set]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\nThe difference for the immutable collections is that methods which would mutate\nthe collection, like `push`, `set`, `unshift` or `splice` instead return a new\nimmutable collection. Methods which return new arrays like `slice` or `concat`\ninstead return new immutable collections.\n\n```javascript\nvar list1 = Immutable.List.of(1, 2);\nvar list2 = list1.push(3, 4, 5);\nvar list3 = list2.unshift(0);\nvar list4 = list1.concat(list2, list3);\nassert(list1.size === 2);\nassert(list2.size === 5);\nassert(list3.size === 6);\nassert(list4.size === 13);\nassert(list4.get(0) === 1);\n```\n\nAlmost all of the methods on [Array][] will be found in similar form on\n`Immutable.List`, those of [Map][] found on `Immutable.Map`, and those of [Set][]\nfound on `Immutable.Set`, including collection operations like `forEach()`\nand `map()`.\n\n```javascript\nvar alpha = Immutable.Map({a:1, b:2, c:3, d:4});\nalpha.map((v, k) => k.toUpperCase()).join();\n// 'A,B,C,D'\n```\n\n### Accepts raw JavaScript objects.\n\nDesigned to inter-operate with your existing JavaScript, `immutable`\naccepts plain JavaScript Arrays and Objects anywhere a method expects an\n`Iterable` with no performance penalty.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3, d:4});\nvar map2 = Immutable.Map({c:10, a:20, t:30});\nvar obj = {d:100, o:200, g:300};\nvar map3 = map1.merge(map2, obj);\n// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }\n```\n\nThis is possible because `immutable` can treat any JavaScript Array or Object\nas an Iterable. You can take advantage of this in order to get sophisticated\ncollection methods on JavaScript Objects, which otherwise have a very sparse\nnative API. Because Seq evaluates lazily and does not cache intermediate\nresults, these operations can be extremely efficient.\n\n```javascript\nvar myObject = {a:1,b:2,c:3};\nImmutable.Seq(myObject).map(x => x * x).toObject();\n// { a: 1, b: 4, c: 9 }\n```\n\nKeep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a quote-less\nshorthand, while Immutable Maps accept keys of any type.\n\n```js\nvar obj = { 1: \"one\" };\nObject.keys(obj); // [ \"1\" ]\nobj[\"1\"]; // \"one\"\nobj[1];   // \"one\"\n\nvar map = Immutable.fromJS(obj);\nmap.get(\"1\"); // \"one\"\nmap.get(1);   // undefined\n```\n\nProperty access for JavaScript Objects first converts the key to a string, but\nsince Immutable Map keys can be of any type the argument to `get()` is\nnot altered.\n\n\n### Converts back to raw JavaScript objects.\n\nAll `immutable` Iterables can be converted to plain JavaScript Arrays and\nObjects shallowly with `toArray()` and `toObject()` or deeply with `toJS()`.\nAll Immutable Iterables also implement `toJSON()` allowing them to be passed to\n`JSON.stringify` directly.\n\n```javascript\nvar deep = Immutable.Map({ a: 1, b: 2, c: Immutable.List.of(3, 4, 5) });\ndeep.toObject() // { a: 1, b: 2, c: List [ 3, 4, 5 ] }\ndeep.toArray() // [ 1, 2, List [ 3, 4, 5 ] ]\ndeep.toJS() // { a: 1, b: 2, c: [ 3, 4, 5 ] }\nJSON.stringify(deep) // '{\"a\":1,\"b\":2,\"c\":[3,4,5]}'\n```\n\n### Embraces ES6\n\n`Immutable` takes advantage of features added to JavaScript in [ES6][],\nthe latest standard version of ECMAScript (JavaScript), including [Iterators][],\n[Arrow Functions][], [Classes][], and [Modules][]. It's also inspired by the\n[Map][] and [Set][] collections added to ES6. The library is \"transpiled\" to ES3\nin order to support all modern browsers.\n\nAll examples are presented in ES6. To run in all browsers, they need to be\ntranslated to ES3.\n\n```js\n// ES6\nfoo.map(x => x * x);\n// ES3\nfoo.map(function (x) { return x * x; });\n```\n\n[Iterators]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n[Arrow Functions]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n[Classes]: http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\n[Modules]: http://www.2ality.com/2014/09/es6-modules-final.html\n\n\nNested Structures\n-----------------\n\nThe collections in `immutable` are intended to be nested, allowing for deep\ntrees of data, similar to JSON.\n\n```javascript\nvar nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }\n```\n\nA few power-tools allow for reading and operating on nested data. The\nmost useful are `mergeDeep`, `getIn`, `setIn`, and `updateIn`, found on `List`,\n`Map` and `OrderedMap`.\n\n```javascript\nvar nested2 = nested.mergeDeep({a:{b:{d:6}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n```\n\n```javascript\nnested2.getIn(['a', 'b', 'd']); // 6\n\nvar nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nvar nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n\nLazy Seq\n--------\n\n`Seq` describes a lazy operation, allowing them to efficiently chain\nuse of all the Iterable methods (such as `map` and `filter`).\n\n**Seq is immutable** — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any mutative\nmethod called on a Seq will return a new Seq.\n\n**Seq is lazy** — Seq does as little work as necessary to respond to any\nmethod call.\n\nFor example, the following does not perform any work, because the resulting\nSeq is never used:\n\n    var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)\n      .filter(x => x % 2).map(x => x * x);\n\nOnce the Seq is used, it performs only the work necessary. In this\nexample, no intermediate arrays are ever created, filter is called three times,\nand map is only called twice:\n\n    console.log(oddSquares.get(1)); // 9\n\nAny collection can be converted to a lazy Seq with `.toSeq()`.\n\n    var seq = Immutable.Map({a:1, b:1, c:1}).toSeq();\n\nSeq allow for the efficient chaining of sequence operations, especially when\nconverting to a different concrete type (such as to a JS object):\n\n    seq.flip().map(key => key.toUpperCase()).flip().toObject();\n    // Map { A: 1, B: 1, C: 1 }\n\nAs well as expressing logic that would otherwise seem memory-limited:\n\n    Immutable.Range(1, Infinity)\n      .skip(1000)\n      .map(n => -n)\n      .filter(n => n % 2 === 0)\n      .take(2)\n      .reduce((r, n) => r * n, 1);\n    // 1006008\n\nNote: An iterable is always iterated in the same order, however that order may\nnot always be well defined, as is the case for the `Map`.\n\n\nEquality treats Collections as Data\n-----------------------------------\n\n`Immutable` provides equality which treats immutable data structures as pure\ndata, performing a deep equality check if necessary.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:1, c:1});\nvar map2 = Immutable.Map({a:1, b:1, c:1});\nassert(map1 !== map2); // two different instances\nassert(Immutable.is(map1, map2)); // have equivalent values\nassert(map1.equals(map2)); // alternatively use the equals method\n```\n\n`Immutable.is()` uses the same measure of equality as [Object.is][]\nincluding if both are immutable and all keys and values are equal\nusing the same measure of equality.\n\n[Object.is]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\n\nBatching Mutations\n------------------\n\n> If a tree falls in the woods, does it make a sound?\n>\n> If a pure function mutates some local data in order to produce an immutable\n> return value, is that ok?\n>\n> — Rich Hickey, Clojure\n\nApplying a mutation to create a new immutable object results in some overhead,\nwhich can add up to a minor performance penalty. If you need to apply a series\nof mutations locally before returning, `Immutable` gives you the ability to\ncreate a temporary mutable (transient) copy of a collection and apply a batch of\nmutations in a performant manner by using `withMutations`. In fact, this is\nexactly how  `Immutable` applies complex mutations itself.\n\nAs an example, building `list2` results in the creation of 1, not 3, new\nimmutable Lists.\n\n```javascript\nvar list1 = Immutable.List.of(1,2,3);\nvar list2 = list1.withMutations(function (list) {\n  list.push(4).push(5).push(6);\n});\nassert(list1.size === 3);\nassert(list2.size === 6);\n```\n\nNote: `immutable` also provides `asMutable` and `asImmutable`, but only\nencourages their use when `withMutations` will not suffice. Use caution to not\nreturn a mutable copy, which could result in undesired behavior.\n\n*Important!*: Only a select few methods can be used in `withMutations` including\n`set`, `push` and `pop`. These methods can be applied directly against a\npersistent data-structure where other methods like `map`, `filter`, `sort`,\nand `splice` will always return new immutable data-structures and never mutate\na mutable collection.\n\n\nDocumentation\n-------------\n\n[Read the docs](http://facebook.github.io/immutable-js/docs/) and eat your vegetables.\n\nDocs are automatically generated from [Immutable.d.ts](https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts).\nPlease contribute!\n\nAlso, don't miss the [Wiki](https://github.com/facebook/immutable-js/wiki) which\ncontains articles on specific topics. Can't find something? Open an [issue](https://github.com/facebook/immutable-js/issues).\n\n\nTesting\n-------\n\nIf you are using the [Chai Assertion Library](http://chaijs.com/), [Chai Immutable](https://github.com/astorije/chai-immutable) provides a set of assertions to use against `Immutable` collections.\n\n\nContribution\n------------\n\nUse [Github issues](https://github.com/facebook/immutable-js/issues) for requests.\n\nWe actively welcome pull requests, learn how to [contribute](./CONTRIBUTING.md).\n\n\nChangelog\n---------\n\nChanges are tracked as [Github releases](https://github.com/facebook/immutable-js/releases).\n\n\nThanks\n------\n\n[Phil Bagwell](https://www.youtube.com/watch?v=K2NYwP90bNs), for his inspiration\nand research in persistent data structures.\n\n[Hugh Jackson](https://github.com/hughfdjackson/), for providing the npm package\nname. If you're looking for his unsupported package, see [this repository](https://github.com/hughfdjackson/immutable).\n\n\nLicense\n-------\n\nImmutable.js is [MIT-licensed](https://github.com/facebook/immutable-js/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/facebook/immutable-js.git"
  },
  "scripts": {
    "build": "grunt default && gulp default",
    "deploy": "(cd ./pages/out && git init && git config user.name \"Travis CI\" && git config user.email \"github@fb.com\" && git add . && git commit -m \"Deploy to GitHub Pages\" && git push --force --quiet \"https://${GH_TOKEN}@github.com/facebook/immutable-js.git\" master:gh-pages > /dev/null 2>1)",
    "lint": "eslint src/ && grunt lint && gulp lint",
    "perf": "node ./resources/bench.js",
    "start": "npm run build && node ./pages/resources/start.js",
    "test": "npm run lint && npm run testonly",
    "testonly": "./resources/node_test.sh"
  },
  "typescript": {
    "definition": "dist/immutable.d.ts"
  },
  "typings": "dist/immutable-nonambient.d.ts",
  "version": "3.8.2"
}
