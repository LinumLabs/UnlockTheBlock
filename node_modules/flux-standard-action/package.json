{
  "_args": [
    [
      {
        "raw": "flux-standard-action@^0.6.1",
        "scope": null,
        "escapedName": "flux-standard-action",
        "name": "flux-standard-action",
        "rawSpec": "^0.6.1",
        "spec": ">=0.6.1 <0.7.0",
        "type": "range"
      },
      "/home/nicolaas/hackathon/node_modules/redux-promise"
    ]
  ],
  "_from": "flux-standard-action@>=0.6.1 <0.7.0",
  "_id": "flux-standard-action@0.6.1",
  "_inCache": true,
  "_location": "/flux-standard-action",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-5-east.internal.npmjs.com",
    "tmp": "tmp/flux-standard-action-0.6.1.tgz_1454443066301_0.11490102671086788"
  },
  "_npmUser": {
    "name": "acdlite",
    "email": "acdlite@me.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flux-standard-action@^0.6.1",
    "scope": null,
    "escapedName": "flux-standard-action",
    "name": "flux-standard-action",
    "rawSpec": "^0.6.1",
    "spec": ">=0.6.1 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/redux-promise"
  ],
  "_resolved": "https://registry.npmjs.org/flux-standard-action/-/flux-standard-action-0.6.1.tgz",
  "_shasum": "6f34211b94834ea1c3cc30f4e7afad3d0fbf71a2",
  "_shrinkwrap": null,
  "_spec": "flux-standard-action@^0.6.1",
  "_where": "/home/nicolaas/hackathon/node_modules/redux-promise",
  "author": {
    "name": "Andrew Clark",
    "email": "acdlite@me.com"
  },
  "dependencies": {
    "lodash.isplainobject": "^3.2.0"
  },
  "description": "A human-friendly standard for Flux action objects",
  "devDependencies": {
    "babel": "^5.6.14",
    "babel-core": "^5.6.15",
    "babel-eslint": "^4.1.8",
    "chai": "^3.0.0",
    "eslint": "^0.24.0",
    "eslint-config-airbnb": "0.0.6",
    "mocha": "^2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "6f34211b94834ea1c3cc30f4e7afad3d0fbf71a2",
    "tarball": "https://registry.npmjs.org/flux-standard-action/-/flux-standard-action-0.6.1.tgz"
  },
  "gitHead": "96349384bcf478fcba8c92a6e2a03798fa8a5a3b",
  "keywords": [
    "flux",
    "redux",
    "actions",
    "fsa"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "acdlite",
      "email": "acdlite@me.com"
    }
  ],
  "name": "flux-standard-action",
  "optionalDependencies": {},
  "readme": "Flux Standard Action\n====================\n\n[![build status](https://img.shields.io/travis/acdlite/flux-standard-action/master.svg?style=flat-square)](https://travis-ci.org/acdlite/flux-standard-action)\n[![npm version](https://img.shields.io/npm/v/flux-standard-action.svg?style=flat-square)](https://www.npmjs.com/package/flux-standard-action)\n\n## Introduction\n\nA human-friendly standard for Flux action objects. Feedback welcome.\n\n### Motivation\n\nIt's much easier to work with Flux actions if we can make certain assumptions about their shape. For example, essentially all Flux actions have an identifier field, such as `type`, `actionType`, or `actionId`. Many Flux implementations also include a way for actions to indicate success or failure, especially as the result of a data-fetching operation. Defining a minimal, common standard for these patterns enables the creation of useful tools and abstractions.\n\n### Errors as a first class concept\n\nFlux actions can be thought of as an asychronous sequence of values. It is important for asynchronous sequences to deal with errors. Currently, many Flux implementations don't do this, and instead define separate action types like `LOAD_SUCCESS` and `LOAD_FAILURE`. This is less than ideal, because it overloads two separate concerns: disambiguating actions of a certain type from the \"global\" action sequence, and indicating whether or not an action represents an error. FSA treats errors as a first class concept.\n\n### Design goals\n\n- **Human-friendly.** FSA actions should be easy to read and write by humans.\n- **Useful**. FSA actions should enable the creation of useful tools and abstractions.\n- **Simple.** FSA should be simple, straightforward, and flexible in its design.\n\n### Example\n\nA basic Flux Standard Action:\n\n```js\n{\n  type: 'ADD_TODO',\n  payload: {\n    text: 'Do something.'  \n  }\n}\n```\n\nAn FSA that represents an error, analogous to a rejected Promise:\n\n```js\n{\n  type: 'ADD_TODO',\n  payload: new Error(),\n  error: true\n}\n```\n\n## Actions\n\nAn action MUST\n\n- be a plain JavaScript object.\n- have a `type` property.\n\nAn action MAY\n\n- have a `error` property.\n- have a `payload` property.\n- have a `meta` property.\n\nAn action MUST NOT include properties other than `type`, `payload`, and `error`, and `meta`.\n\n### `type`\n\nThe `type` of an action identifies to the consumer the nature of the action that has occurred. Two actions with the same `type` MUST be strictly equivalent (using `===`). By convention, `type` is usually string constant or a Symbol.\n\n### `payload`\n\nThe optional `payload` property MAY be any type of value. It represents the payload of the action. Any information about the action that is not the `type` or status of the action should be part of the `payload` field.\n\nBy convention, if `error` is `true`, the `payload` SHOULD be an error object. This is akin to rejecting a promise with an error object.\n\n### `error`\n\nThe optional `error` property MAY be set to `true` if the action represents an error.\n\nAn action whose `error` is true is analogous to a rejected Promise. By convention, the `payload` SHOULD be an error object.\n\nIf `error` has any other value besides `true`, including `undefined` and `null`, the action MUST NOT be interpreted as an error.\n\n### `meta`\n\nThe optional `meta` property MAY be any type of value. It is intended for any extra information that is not part of the payload.\n\n## Utility functions\n\nThe module `flux-standard-action` is available on npm. It exports a few utlity functions.\n\n```js\nimport { isFSA } from 'flux-standard-action';\n```\n### `isFSA(action)`\n\nReturns true if `action` is FSA compliant.\n\n## Libraries\n\n- [redux-actions](https://github.com/acdlite/redux-actions) - a set of helpers for creating and handling FSA actions in Redux.\n- [redux-promise](https://github.com/acdlite/redux-promise) - Redux promise middleware that supports FSA actions.\n- [redux-rx](https://github.com/acdlite/redux-rx) - RxJS utilities for Redux, including a middleware that supports FSA actions.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "prepublish": "make clean build",
    "test": "make test"
  },
  "version": "0.6.1"
}
