{
  "_args": [
    [
      {
        "raw": "linked-list@0.1.0",
        "scope": null,
        "escapedName": "linked-list",
        "name": "linked-list",
        "rawSpec": "0.1.0",
        "spec": "0.1.0",
        "type": "version"
      },
      "/home/nicolaas/hackathon/node_modules/socketcluster-client"
    ]
  ],
  "_from": "linked-list@0.1.0",
  "_id": "linked-list@0.1.0",
  "_inCache": true,
  "_location": "/linked-list",
  "_npmUser": {
    "name": "wooorm",
    "email": "tituswormer@gmail.com"
  },
  "_npmVersion": "2.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "linked-list@0.1.0",
    "scope": null,
    "escapedName": "linked-list",
    "name": "linked-list",
    "rawSpec": "0.1.0",
    "spec": "0.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/socketcluster-client"
  ],
  "_resolved": "https://registry.npmjs.org/linked-list/-/linked-list-0.1.0.tgz",
  "_shasum": "798b0ff97d1b92a4fd08480f55aea4e9d49d37bf",
  "_shrinkwrap": null,
  "_spec": "linked-list@0.1.0",
  "_where": "/home/nicolaas/hackathon/node_modules/socketcluster-client",
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/wooorm/linked-list/issues"
  },
  "dependencies": {},
  "description": "Minimalistic linked lists",
  "devDependencies": {
    "eslint": "^0.9.0",
    "istanbul": "^0.3.0",
    "jscs": "^1.0.0",
    "jshint": "^2.0.0",
    "mocha": "^2.0.0",
    "uglify-js": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "798b0ff97d1b92a4fd08480f55aea4e9d49d37bf",
    "tarball": "https://registry.npmjs.org/linked-list/-/linked-list-0.1.0.tgz"
  },
  "gitHead": "6a25ce442a34f06c9df2b671e601a4d6855840d2",
  "homepage": "https://github.com/wooorm/linked-list#readme",
  "keywords": [
    "linked",
    "list"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "wooorm",
      "email": "tituswormer@gmail.com"
    }
  ],
  "name": "linked-list",
  "optionalDependencies": {},
  "readme": "# linked-list [![Build Status](https://img.shields.io/travis/wooorm/linked-list.svg?style=flat)](https://travis-ci.org/wooorm/linked-list) [![Coverage Status](https://img.shields.io/coveralls/wooorm/linked-list.svg?style=flat)](https://coveralls.io/r/wooorm/linked-list?branch=master)\n\nMinimalistic [linked](http://blog.millermedeiros.com/linked-lists) [lists](http://wikipedia.org/wiki/Linked_list).\n\n## Installation\n\nnpm:\n```sh\n$ npm install linked-list\n```\n\nComponent:\n```sh\n$ component install wooorm/linked-list\n```\n\nBower:\n```sh\n$ bower install linked-list\n```\n\nStandalone library:\n\n```html\n<script src=\"/your/js/path/linked-list.globals.js\"></script>\n```\n\nDownload the latest minified standalone [release](https://raw.github.com/wooorm/linked-list/master/_destination/linked-list.globals.js) and add it to your project.\nInclude the above snippet in your HTML. This makes the `LinkedList` module available in the global namespace (`window` in the browser).\n\n## Usage\n\n### “Simple”\n\n```js\nvar LinkedList = require('linked-list'); // or use AMD, or globals.\n\nvar item = new LinkedList.Item();\nvar item_ = new LinkedList.Item();\nvar item__ = new LinkedList.Item();\nvar list = new LinkedList(item, item_, item__);\n\nlist.head // => item\nlist.head.next // => item_\nlist.head.next.next // => item__\nlist.head.next.prev // => item\nlist.tail // => item__\nlist.tail.next // => `null`\n```\n\n### Subclassing\n\n```js\nvar extend = require('some-extending-method...'); // e.g. assimilate.\nvar List = require('linked-list');\nvar Item = List.Item;\n\nfunction Tokens() {\n    List.apply(this, arguments);\n};\n\nfunction Token(value) {\n    this.value = value;\n};\n\nextend(Tokens.prototype, List.prototype, {\n    'join' : function(delimeter){\n        return this.toArray().join(delimeter);\n    }\n});\n\nextend(Token.prototype, Item.prototype, {\n    'toString' : function(){\n        return this.value;\n    }\n});\n\nvar dogs = new Token('dogs');\nvar and = new Token('&');\nvar cats = new Token('cats');\nvar tokens = new Tokens(dogs, and, cats);\n\ntokens.join(' '); // \"dogs & cats\"\n\nand.prepend(cats);\nand.append(dogs);\n\ntokens.join(' ') + '!'; // \"cats & dogs!\"\n```\n\n## API\n\n### LinkedList([items…])\n```js\nvar list = new LinkedList();\n```\n\nCreates a new Linked List.\n\n\n#### LinkedList.from([items[…]])\n```js\nvar list = LinkedList.from(),\n    list_ = LinkedList.from([]),\n    list__ = LinkedList.from([new LinkedList.Item()]);\n```\n\nCreates a new Linked List* from the given array of items. Ignores `null` or `undefined` values. Throws an error when a given item has no `detach`, `append`, or `prepend` methods.\n\n* Actually, a new instance of this, e.g. when placed on `Token` (`Token.from`), it would create a new instance of Token.\n\n#### LinkedList.of([items…])\n```js\nvar list = LinkedList.of(),\n    list_ = LinkedList.of(new LinkedList.Item());\n```\n\nCreates a new Linked List from the given arguments. Defers to `LinkedList.from` (see above). As in:\n\n```js\nList.of = function (/*items...*/) {\n    return List.from.call(this, arguments);\n};\n```\n\n#### LinkedList#append(item)\n```js\nvar list = new LinkedList(),\n    item = new LinkedList.Item();\n\nlist.head === null // true\nitem.list === null // true\n\nlist.append(item);\n\nlist.head === item // true\nitem.list === list // true\n```\n\nAppends an item to a list. Throws an error when the given item has no `detach`, `append`, or `prepend` methods. Returns the given item.\n\n\n#### LinkedList#prepend(item)\n```js\nvar list = new LinkedList(),\n    item = new LinkedList.Item();\n\nlist.prepend(item);\n```\n\nPrepends an item to a list. Throws an error when the given item has no `detach`, `append`, or `prepend` methods. Returns the given item.\n\n\n#### LinkedList#toArray()\n```js\nvar item = new LinkedList.Item(),\n    item_ = new LinkedList.Item(),\n    list = new LinkedList(item, item_),\n    array = list.toArray();\n\narray[0] === item // true\narray[1] === item_ // true\narray[0].next === item_ // true\narray[1].prev === item // true\n```\n\nReturns the items in the list in an array.\n\n\n#### LinkedList#head\n```js\nvar item = new LinkedList.Item(),\n    list = new LinkedList(item);\n\nlist.head === item; // true\n```\n\nThe first item in a list, and `null` otherwise.\n\n\n#### LinkedList#tail\n```js\nvar list = new LinkedList(),\n    item = new LinkedList.Item(),\n    item_ = new LinkedList.Item();\n\nlist.tail === null; // true\n\nlist.append(item);\nlist.tail === null; // true, see note.\n\nlist.append(item_);\nlist.tail === item_; // true\n```\n\nThe last item in a list, and `null` otherwise. Note that a list with only one item has **no tail**, only a head.\n\n\n## LinkedList.Item()\n```js\nvar item = new LinkedList.Item();\n```\n\nCreates a new Linked List Item.\n\n\n#### LinkedList.Item#append(item)\n```js\nvar item = new LinkedList.Item(),\n    item_ = new LinkedList.Item();\n\n(new LinkedList()).append(item);\n\nitem.next === null // true\n\nitem.append(item_);\nitem.next === item_ // true\n```\n\nAdds the given item **after** the operated on item in a list. Throws an error when the given item has no `detach`, `append`, or `prepend` methods. Returns false when the operated on item is not attached to a list, otherwise the given item.\n\n\n#### LinkedList.Item#prepend(item)\n```js\nvar item = new LinkedList.Item(),\n    item_ = new LinkedList.Item();\n\n(new LinkedList()).append(item);\n\nitem.prev === null // true\n\nitem.prepend(item_);\nitem.prev === item_ // true\n```\n\nAdds the given item **before** the operated on item in a list. Throws an error when the given item has no `detach`, `append`, or `prepend` methods. Returns false when the operated on item is not attached to a list, otherwise the given item.\n\n\n#### LinkedList.Item#detach()\n```js\nvar item = new LinkedList.Item(),\n    list = new LinkedList(item);\n\nitem.list === list // true\n\nitem.detach();\nitem.list === null // true\n```\n\nRemoves the operated on item from its parent list. Removes references to it on its parent `list`, and `prev` and `next` items; relinking them when possible.\nReturns the operated on item. Even when it was already detached.\n\n\n#### LinkedList.Item#next\n```js\nvar item = new LinkedList.Item(),\n    item_ = new LinkedList.Item();\n\nnew LinkedList(item);\n\nitem.next === null // true\nitem_.next === null // true\n\nitem.append(item_);\n\nitem.next === item_ // true\n\nitem.detach();\n\nitem.next === null // true\n```\n\nThe items succeeding item, and `null` otherwise.\n\n\n#### LinkedList.Item#prev\n```js\nvar item = new LinkedList.Item(),\n    item_ = new LinkedList.Item();\n\nnew LinkedList(item);\n\nitem.prev === null // true\nitem_.prev === null // true\n\nitem.append(item_);\n\nitem_.prev === item // true\n\nitem_.detach();\n\nitem_.prev === null // true\n```\n\nThe items preceding item, and `null` otherwise.\n\n\n#### LinkedList.Item#list\n```js\nvar item = new LinkedList.Item(),\n    list = new LinkedList();\n\nitem.list === null // true\n\nlist.append(item);\n\nitem.list === list // true\n\nitem.detach();\n\nitem.list === null // true\n```\n\nThe items parent list, and `null` otherwise.\n\n## Licence\n\nMIT © [Titus Wormer](http://wooorm.com)\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wooorm/linked-list.git"
  },
  "scripts": {
    "coverage": "istanbul cover node_modules/.bin/_mocha -- -- test.js",
    "lint": "npm run lint-api && npm run lint-test && npm run lint-style",
    "lint-api": "eslint index.js _source/linked-list.js",
    "lint-style": "jscs index.js _source/linked-list.js test.js --reporter=inline",
    "lint-test": "eslint test.js --env mocha",
    "test": "_mocha --reporter spec --check-leaks -u exports test.js",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- --reporter spec --check-leaks -u exports test.js"
  },
  "version": "0.1.0"
}
